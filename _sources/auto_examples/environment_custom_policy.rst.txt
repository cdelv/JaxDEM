
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/environment_custom_policy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_environment_custom_policy.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_environment_custom_policy.py:


Driving Environments with a Custom Policy
-----------------------------------------

In this example, we create an environment instance and show how to drive it
efficiently using a custom policy. This approach removes the need to create a
trainer object, making evaluation much more efficient.

.. GENERATED FROM PYTHON SOURCE LINES 10-12

Imports
~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 12-22

.. code-block:: Python

    import jax
    import jax.numpy as jnp
    from flax import nnx

    import jaxdem as jdem
    import jaxdem.rl as rl
    from jaxdem import utils

    from pathlib import Path








.. GENERATED FROM PYTHON SOURCE LINES 23-26

Variables
~~~~~~~~~
First, we define all the variables needed for the example.

.. GENERATED FROM PYTHON SOURCE LINES 26-35

.. code-block:: Python

    frames_dir = Path("/tmp/frames")
    key = jax.random.key(1)
    N = 24
    save_every = 40
    T = 4000
    batches = T // save_every
    num_envs = 40









.. GENERATED FROM PYTHON SOURCE LINES 36-44

The Policy
~~~~~~~~~~
Next, we define a callable that takes the observations and some keyword
arguments, and returns the corresponding actions. For more information,
see :py:func:`~jaxdem.utils.env_step`.

In this example, we drive the environment with a model from JaxDEM using
``nnx``. However, `model` can be any JIT-compatible function.

.. GENERATED FROM PYTHON SOURCE LINES 44-51

.. code-block:: Python

    def model(obs, graphdef, graphstate):
        base_model = nnx.merge(graphdef, graphstate)
        pi, value = base_model(obs, sequence=False)
        action = pi.sample(seed=1)
        return action









.. GENERATED FROM PYTHON SOURCE LINES 52-60

Model and Environment
~~~~~~~~~~~~~~~~~~~~~
Now we create a model and an environment to use in the example.
We will not perform any training here, since the goal is to show
how to drive the environment directly.

A trained model could be loaded in the same way using
:py:class:`~jaxdem.writers.CheckpointModelLoader`.

.. GENERATED FROM PYTHON SOURCE LINES 60-72

.. code-block:: Python

    env = rl.Environment.create("MultiNavigator", N=N)

    key, subkey = jax.random.split(key)
    base_model = rl.Model.create(
        "SharedActorCritic",
        key=nnx.Rngs(subkey),
        observation_space_size=env.observation_space_size,
        action_space_size=env.action_space_size,
    )
    base_model.eval()
    graphdef, graphstate = nnx.split(base_model)








.. GENERATED FROM PYTHON SOURCE LINES 73-77

Environment Vectorization
~~~~~~~~~~~~~~~~~~~~~~~~~
JaxDEM supports vectorized environments, allowing multiple simulations to
run in parallel for significant speedups. This is usefull for gathering statistics about the environmentt.

.. GENERATED FROM PYTHON SOURCE LINES 77-82

.. code-block:: Python

    subkeys = jax.vmap(lambda i: jax.random.fold_in(key, i))(jnp.arange(num_envs))
    env = jax.vmap(lambda _: env)(jnp.arange(num_envs))
    env = rl.vectorise_env(env)
    env = env.reset(env, subkeys)








.. GENERATED FROM PYTHON SOURCE LINES 83-87

Driving the Environment
~~~~~~~~~~~~~~~~~~~~~~~
There are two main ways to drive an environment. The first is by stepping
it manually for a fixed number of steps:

.. GENERATED FROM PYTHON SOURCE LINES 87-95

.. code-block:: Python

    env = utils.env_step(
        env,
        model,
        graphdef=graphdef,
        graphstate=graphstate,
        n=save_every,
    )








.. GENERATED FROM PYTHON SOURCE LINES 96-98

The second approach is to roll out a trajectory, collecting data every
`stride` steps:

.. GENERATED FROM PYTHON SOURCE LINES 98-107

.. code-block:: Python

    env, env_traj = utils.env_trajectory_rollout(
        env,
        model,
        graphdef=graphdef,
        graphstate=graphstate,
        n=batches,
        stride=save_every,
    )








.. GENERATED FROM PYTHON SOURCE LINES 108-112

Saving Data
~~~~~~~~~~~
Finally, we can use JaxDEMâ€™s :py:class:`~jaxdem.writers.VTKWriter` to save
the full rollout to disk in a single call:

.. GENERATED FROM PYTHON SOURCE LINES 112-114

.. code-block:: Python

    writer = jdem.VTKWriter(directory=frames_dir)
    writer.save(env_traj.state, env_traj.system, trajectory=True)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.311 seconds)


.. _sphx_glr_download_auto_examples_environment_custom_policy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: environment_custom_policy.ipynb <environment_custom_policy.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: environment_custom_policy.py <environment_custom_policy.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: environment_custom_policy.zip <environment_custom_policy.zip>`
