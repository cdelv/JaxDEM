
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/introduction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_introduction.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_introduction.py:


Introduction
---------------------

Lets look at the absolute simplest simulation you can run using JaxDEM.

Let's get started!

.. GENERATED FROM PYTHON SOURCE LINES 9-12

.. code-block:: Python


    import jaxdem as jdem








.. GENERATED FROM PYTHON SOURCE LINES 13-17

Initialize the Simulation State
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
First, we create a :py:class:`jaxdem.state.State` object. The state object holds all the information of the objects inside the simulation.
Lets create a single particle at the origin (0, 0, 0). By default, :py:meth:`jaxdem.state.State.create` will set default values for all non-specified attributes.

.. GENERATED FROM PYTHON SOURCE LINES 17-20

.. code-block:: Python


    state = jdem.State.create(pos=[[0.0, 0.0, 0.0]])








.. GENERATED FROM PYTHON SOURCE LINES 21-23

Note that we used `pos=[[coords]]` not `pos=[coords]`. This is because :py:meth:`jaxdem.state.State.create` expects a list of coordinates.
Therefore, we must pass a list of lists, even for a single particle. Internally, the coordinates list will be converted to a Jax array.

.. GENERATED FROM PYTHON SOURCE LINES 25-31

Initialize the Simulation System
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Next, we define our :py:class:`jaxdem.system.System`. This object holds all the global parameters
and configuration of our simulation. In the same way as `state`, :py:meth:`jaxdem.system.System.create` will
use default values for anything we don't specify. The only requirement is that the dimension of the
simulation matches the dimension of the state:

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: Python


    system = jdem.System.create(state.shape)








.. GENERATED FROM PYTHON SOURCE LINES 35-39

Run the Simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Finally, we drive the simulation by calling :py:class:`jaxdem.system.System.step`. We'll advance
the simulation for `n_steps` time steps:

.. GENERATED FROM PYTHON SOURCE LINES 39-44

.. code-block:: Python


    n_steps = 10
    state, system = system.step(state, system, n=n_steps)









.. GENERATED FROM PYTHON SOURCE LINES 45-48

Saving the Simulation State
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The last thing left to do is to save the simulation:

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: Python


    writer = jdem.VTKWriter(directory="/tmp/data")
    writer.save(state, system)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.314 seconds)


.. _sphx_glr_download_auto_examples_introduction.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: introduction.ipynb <introduction.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: introduction.py <introduction.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: introduction.zip <introduction.zip>`
